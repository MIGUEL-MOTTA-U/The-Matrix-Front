name: Build and deploy Node.js app to Azure Web App - frontArsw

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.x

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          # Crear server.js con manejo de errores mejorado y verificación de rutas
          echo 'const express = require("express");
          const compression = require("compression");
          const path = require("path");
          const fs = require("fs");
          const { createRequestHandler } = require("@remix-run/express");

          const app = express();
          app.use(compression());

          // Verificar rutas de archivos antes de iniciar
          const checkPaths = () => {
            console.log("Current directory:", __dirname);
            console.log("Directory contents:", fs.readdirSync(__dirname));
            
            // Verificar ubicación del build
            const buildPaths = [
              "./build",
              "./build/index.js",
              "../build",
              "/home/site/wwwroot/build"
            ];
            
            for (const buildPath of buildPaths) {
              try {
                if (fs.existsSync(buildPath)) {
                  console.log(`Found build at: ${buildPath}`);
                  return buildPath;
                }
              } catch (err) {
                console.log(`Error checking ${buildPath}:`, err);
              }
            }
            
            // Si no se encuentra, buscar recursivamente
            console.log("Searching for build directory recursively...");
            return findBuildRecursively(__dirname) || "./build";
          };
          
          // Función para buscar el build recursivamente
          const findBuildRecursively = (dir, depth = 0) => {
            if (depth > 3) return null; // Limitar profundidad
            
            const files = fs.readdirSync(dir);
            
            if (files.includes("build") && fs.statSync(path.join(dir, "build")).isDirectory()) {
              return path.join(dir, "build");
            }
            
            for (const file of files) {
              const filePath = path.join(dir, file);
              if (fs.statSync(filePath).isDirectory() && file !== "node_modules") {
                const result = findBuildRecursively(filePath, depth + 1);
                if (result) return result;
              }
            }
            
            return null;
          };
          
          const buildPath = checkPaths();
          console.log(`Using build path: ${buildPath}`);

          // Servir archivos estáticos
          app.use("/build", express.static(path.join(__dirname, "public/build"), {
            immutable: true,
            maxAge: "1y"
          }));

          app.use(express.static("public", { maxAge: "1h" }));

          // Verificar si existe el archivo de build
          let buildModule;
          try {
            buildModule = require(buildPath);
            console.log("Build module loaded successfully");
          } catch (error) {
            console.error(`Failed to load build module from ${buildPath}:`, error);
            app.use((req, res) => {
              res.status(500).send(`
                <html>
                  <head><title>Server Error</title></head>
                  <body>
                    <h1>Server Configuration Error</h1>
                    <p>The server is misconfigured. Could not find build at ${buildPath}.</p>
                    <pre>${error.stack}</pre>
                  </body>
                </html>
              `);
            });
            buildModule = null;
          }

          // Todas las demás solicitudes son manejadas por Remix
          if (buildModule) {
            app.all(
              "*",
              (req, res, next) => {
                try {
                  return createRequestHandler({
                    build: buildModule,
                    getLoadContext: () => ({})
                  })(req, res, next);
                } catch (error) {
                  console.error("Error handling request:", error);
                  res.status(500).send("Server Error: " + error.message);
                }
              }
            );
          }

          const port = process.env.PORT || 8080;
          app.listen(port, () => {
            console.log(`Express server listening on port ${port}`);
          });' > server.js

          # Crear web.config optimizado para IIS
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode 
                nodeProcessCommandLine="node"
                watchedFiles="server.js;web.config"
                loggingEnabled="true"
                logDirectory="iisnode"
                debuggingEnabled="true"
              />
            </system.webServer>
          </configuration>' > web.config

          # Crear package.json simplificado con todas las dependencias necesarias
          echo '{
            "name": "the-matrix-front",
            "version": "1.0.0",
            "engines": { "node": ">=20.0.0" },
            "dependencies": {
              "@remix-run/express": "^2.16.0",
              "@remix-run/node": "^2.16.0",
              "@remix-run/react": "^2.16.0",
              "@remix-run/serve": "^2.16.0",
              "compression": "^1.7.4",
              "express": "^4.18.2",
              "react": "^18.2.0",
              "react-dom": "^18.2.0",
              "isbot": "^4.1.0"
            },
            "scripts": {
              "start": "node server.js"
            }
          }' > deploy-package.json

          # Asegurar que la estructura de directorios es correcta
          mkdir -p deploy
          cp -r build deploy/
          cp -r public deploy/ || true
          cp server.js deploy/
          cp web.config deploy/
          cp deploy-package.json deploy/package.json

          # Verificar estructura del despliegue
          echo "Deployment structure:"
          ls -la deploy
          echo "Build directory structure:"
          ls -la deploy/build || echo "No build directory found!"
          
          # Instalar dependencias de producción
          cd deploy && npm install --production

      - name: Zip artifact for deployment
        run: cd deploy && zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'frontArsw'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FRONTARSW }}