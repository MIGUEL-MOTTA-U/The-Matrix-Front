name: Build and deploy Node.js app to Azure Web App - frontArsw

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.x

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      # Crear un package.json simplificado para producción
      - name: Create production package.json
        run: |
          node -e "const pkg = require('./package.json'); 
          const newPkg = { 
            name: pkg.name, 
            version: pkg.version, 
            engines: { node: '20.x' }, 
            dependencies: pkg.dependencies || {}, 
            scripts: { 
              start: 'node server.js' 
            } 
          }; 
          // Asegurarnos de que estas dependencias están incluidas
          newPkg.dependencies['express'] = '^4.18.2';
          newPkg.dependencies['compression'] = '^1.7.4';
          newPkg.dependencies['@remix-run/express'] = pkg.dependencies['@remix-run/express'] || '^2.0.0';
          console.log(JSON.stringify(newPkg, null, 2));" > package.json.new
          mv package.json.new deploy-package.json

      # Crear server.js simplificado y probado
      - name: Create server.js for Azure
        run: |
          cat > server.js << 'EOL'
          const express = require('express');
          const compression = require('compression');
          const path = require('path');
          const { createRequestHandler } = require('@remix-run/express');

          const app = express();
          app.use(compression());

          // Servir archivos estáticos
          app.use("/build", express.static(path.join(__dirname, "public/build"), {
            immutable: true,
            maxAge: "1y"
          }));

          app.use(express.static("public", { maxAge: "1h" }));

          // Todas las demás solicitudes son manejadas por Remix
          app.all(
            "*",
            (req, res, next) => {
              try {
                return createRequestHandler({
                  build: require("./build"),
                  getLoadContext: () => ({})
                })(req, res, next);
              } catch (error) {
                console.error("Error handling request:", error);
                res.status(500).send("Server Error: " + error.message);
              }
            }
          );

          const port = process.env.PORT || 8080;
          app.listen(port, () => {
            console.log(`Express server listening on port ${port}`);
          });
          EOL

      - name: Create web.config for IIS
        run: |
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode watchedFiles="web.config;*.js"/>
            </system.webServer>
          </configuration>
          EOL

      # Instalar las dependencias requeridas explícitamente
      - name: Install required dependencies
        run: |
          pnpm add express compression @remix-run/express

      # Crear el paquete de despliegue
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r build deploy/
          cp -r public deploy/
          cp server.js deploy/
          cp web.config deploy/
          cp deploy-package.json deploy/package.json
          cp pnpm-lock.yaml deploy/
          echo "Installing production dependencies only..."
          cd deploy && npm install --omit=dev

      - name: Zip artifact for deployment
        run: cd deploy && zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'frontArsw'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FRONTARSW }}