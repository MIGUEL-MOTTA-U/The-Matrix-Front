name: Build and deploy Node.js app to Azure Web App - frontArsw

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.x

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.13.1'  # Cambiado a Node.js 18 LTS por mayor estabilidad
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      - name: Create deployment package
        run: |
          # Crear server.js optimizado para producción
          cat > server.js << 'EOL'
          const express = require('express');
          const compression = require('compression');
          const path = require('path');
          const fs = require('fs');

          const app = express();
          app.use(compression());

          // Ruta de health check para Azure
          app.get('/health', (req, res) => {
            res.status(200).send('OK');
          });

          // Servir archivos estáticos
          app.use(express.static('public', { maxAge: '1h' }));

          // Ruta para servir directamente el archivo HTML generado por Remix
          app.use('*', (req, res) => {
            // Servir el index.html generado
            res.sendFile(path.join(__dirname, 'public', 'index.html'));
          });

          const port = process.env.PORT || 8080;
          app.listen(port, () => {
            console.log(`Express server listening on port ${port}`);
          });
          EOL

          # Crear web.config optimizado para IIS
          cat > web.config << 'EOL'
          <?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <webSocket enabled="false" />
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <iisnode
                nodeProcessCommandLine="node"
                watchedFiles="web.config;*.js"
                loggingEnabled="true"
              />
            </system.webServer>
          </configuration>
          EOL

          # Crear .deployment para especificar comandos
          cat > .deployment << 'EOL'
          [config]
          command = node server.js
          EOL

          # Crear package.json simplificado
          cat > deploy-package.json << 'EOL'
          {
            "name": "the-matrix-front",
            "version": "1.0.0",
            "engines": { "node": "18.x" },
            "dependencies": {
              "compression": "^1.7.4",
              "express": "^4.18.2"
            },
            "scripts": {
              "start": "node server.js"
            }
          }
          EOL

          # Asegurar que la estructura de directorios es correcta
          mkdir -p deploy/public
          cp -r build/client/* deploy/public/ || true
          cp server.js deploy/
          cp web.config deploy/
          cp .deployment deploy/
          cp deploy-package.json deploy/package.json

          # Verificar estructura del despliegue
          echo "Deployment structure:"
          ls -la deploy
          echo "Public directory structure:"
          ls -la deploy/public || echo "No public directory content found!"
          
          # Instalar dependencias de producción
          cd deploy && npm install --omit=dev

      - name: Zip artifact for deployment
        run: cd deploy && zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'frontArsw'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FRONTARSW }}