name: Build and deploy Node.js app to Azure Web App - frontArsw

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Install PNPM
        uses: pnpm/action-setup@v4
        with:
          version: 10.x

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'  # Usando Node.js 20 LTS para mayor compatibilidad con Azure
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build application
        run: pnpm build
        env:
          NODE_ENV: production

      # Crear server.js en la raíz para compatibilidad con Azure
      - name: Create server.js for Azure
        run: |
          echo 'const { createRequestHandler } = require("@remix-run/express");
          const express = require("express");
          const compression = require("compression");
          const path = require("path");
          
          const app = express();
          
          app.use(compression());
          
          // Servir archivos estáticos
          app.use("/build", express.static(path.join(process.cwd(), "public/build"), {
            immutable: true,
            maxAge: "1y"
          }));
          
          app.use(express.static("public", { maxAge: "1h" }));
          
          // Todas las demás solicitudes son manejadas por Remix
          app.all(
            "*",
            createRequestHandler({
              build: require("./build"),
              getLoadContext: (req, res) => ({})
            })
          );
          
          const port = process.env.PORT || 3000;
          
          app.listen(port, () => {
            console.log(`Express server listening on port ${port}`);
          });' > server.js

      - name: Create web.config for Azure
        run: |
          echo '<?xml version="1.0" encoding="utf-8"?>
          <configuration>
            <system.webServer>
              <handlers>
                <add name="iisnode" path="server.js" verb="*" modules="iisnode"/>
              </handlers>
              <rewrite>
                <rules>
                  <rule name="NodeInspector" stopProcessing="true">
                    <match url="^server.js\/debug[\/]?" />
                  </rule>
                  <rule name="StaticContent">
                    <action type="Rewrite" url="public{REQUEST_URI}"/>
                  </rule>
                  <rule name="DynamicContent">
                    <conditions>
                      <add input="{REQUEST_FILENAME}" matchType="IsFile" negate="True"/>
                    </conditions>
                    <action type="Rewrite" url="server.js"/>
                  </rule>
                </rules>
              </rewrite>
              <httpErrors existingResponse="PassThrough" />
            </system.webServer>
          </configuration>' > web.config

      - name: Create Azure startup command file
        run: |
          echo "node server.js" > .startup.cmd

      # Agregar dependencias expresas al package.json para producción
      - name: Add Express dependencies
        run: |
          pnpm add express compression @remix-run/express

      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r build deploy/
          cp -r public deploy/
          cp package.json deploy/
          cp pnpm-lock.yaml deploy/
          cp server.js deploy/
          cp web.config deploy/
          cp .startup.cmd deploy/

      - name: Add pnpm setup script
        run: |
          echo '{ "scripts": { "setup": "npx pnpm install --prod", "start": "node server.js" } }' > deploy/package.json

      - name: Zip artifact for deployment
        run: cd deploy && zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'frontArsw'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_FRONTARSW }}